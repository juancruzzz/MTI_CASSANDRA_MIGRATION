import { redisClient } from "../config/redis";
import chalk from 'chalk';

/**
 * Retrieves and displays logs from Redis.
 */
async function checkRedisLogs() {
    try {
        const migrationStatus = await redisClient.get("migration_status");
        console.log("üìä Estado actual de la migraci√≥n en Redis:", JSON.parse(migrationStatus || "{}"));

        const failedBatches = await redisClient.lrange("failed_batches", 0, -1);
        if (failedBatches.length > 0) {
            console.log("‚ö†Ô∏è Lotes fallidos en Redis:");
            failedBatches.forEach((batch: string, index: number) => {
                console.log(`‚ùå Error en lote ${index + 1}:`, JSON.parse(batch || "{}"));
            });
        } else {
            console.log("‚úÖ No hay lotes fallidos en Redis.");
        }
    } catch (error) {
        console.error("‚ùå Error al recuperar logs desde Redis:", error);
    } finally {
        redisClient.quit();
    }
}

/**
 * Retrieves the number of failed batches in Redis.
 */
export async function checkRedisStatus(): Promise<void> {
    try {
        const failedBatches = await redisClient.lrange("failed_batches", 0, -1); // üîπ Obtener todos los lotes fallidos
        const failedCount = failedBatches.length; // üîπ Contar cu√°ntos hay

        if (failedCount > 0) {
            console.log(chalk.red(`‚ö†Ô∏è Redis ‚Üí Lotes fallidos: ${failedCount}`));
        } else {
            console.log(chalk.green("‚úÖ Redis ‚Üí No hay lotes fallidos"));
        }
    } catch (error) {
        console.error(chalk.red("‚ùå Error en Redis:"), error);
    }
}


checkRedisStatus();
